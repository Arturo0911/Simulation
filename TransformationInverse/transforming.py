#!/usr/bin/python3
# encoding: utf-8

import random

BANNER = """
    '########:'########:::::'###::::'##::: ##::'######::'########::'#######::'########::'##::::'##:'####:'##::: ##::'######:::
    ::: ##:::: ##:::: ##::'##:. ##:: ####: ##: ##:::..:: ##::::::: ##:::: ##: ##:::: ##: ####'####:: ##:: ####: ##: ##:::..:::
    ... ##..:: ##.... ##:::'## ##::: ###:: ##:'##... ##: ##.....::'##.... ##: ##.... ##: ###::'###:. ##:: ###:: ##:'##... ##::
    ::: ##:::: ########::'##:::. ##: ## ## ##:. ######:: ######::: ##:::: ##: ########:: ## ### ##:: ##:: ## ## ##: ##::'####:
    ::: ##:::: ##.. ##::: #########: ##. ####::..... ##: ##...:::: ##:::: ##: ##.. ##::: ##. #: ##:: ##:: ##. ####: ##::: ##::
    ::: ##:::: ##::. ##:: ##.... ##: ##:. ###:'##::: ##: ##::::::: ##:::: ##: ##::. ##:: ##:.:: ##:: ##:: ##:. ###: ##::: ##::
    ::: ##:::: ##:::. ##: ##:::: ##: ##::. ##:. ######:: ##:::::::. #######:: ##:::. ##: ##:::: ##:'####: ##::. ##:. ######:::
    :::..:::::..:::::..::..:::::..::..::::..:::......:::..:::::::::.......:::..:::::..::..:::::..::....::..::::..:::......::::
    
    '####:'##::: ##:'##::::'##:'########:'########:::'######::'########:
    . ##:: ###:: ##: ##:::: ##: ##.....:: ##.... ##:'##... ##: ##.....::
    : ##:: ####: ##: ##:::: ##: ##::::::: ##:::: ##: ##:::..:: ##:::::::
    : ##:: ## ## ##: ##:::: ##: ######::: ########::. ######:: ######:::
    : ##:: ##. ####:. ##:: ##:: ##...:::: ##.. ##::::..... ##: ##...::::
    : ##:: ##:. ###::. ## ##::: ##::::::: ##::. ##::'##::: ##: ##:::::::
    '####: ##::. ##:::. ###:::: ########: ##:::. ##:. ######:: ########:
    ....::..::::..:::::...:::::........::..:::::..:::......:::........::
    
    author: Arturo Negreiros
    follow: https://twitter.com/DevTuron
"""


class TransformationInverse:

    def __init__(self) -> None:
        print(BANNER)
        self.random_num = random.uniform(0, 1)

    @staticmethod
    def implement(func_values: list, func_probability: list, aleatory_number: float) -> int:
        """
        :param aleatory_number: number generated by random.uniform(0,1)
        :param func_values: the values of the variable that its, the property value
        :param func_probability: probability values
        :return: which element correspond the called function
        :TODO:
            - You should to input the probability function Xi and Pi
                and input the numbers of values that you want to generate
        """

        counter = 1
        func = func_probability[0]
        x_sample = 0

        for i in range(0, len(func_values)):
            if aleatory_number < func:
                x_sample = func_values[counter - 1]
                break
            else:
                counter += 1
                func += func_probability[counter - 1]

        return x_sample


if __name__ == '__main__':
    z_function = [1 / 8, 4 / 8, 2 / 8, 1 / 8]
    x_function = [-5, 1, 2, 3]
    stack = [random.uniform(0, 1) for _ in range(0, 5)]
    stack_test = [0.91, 0.41, 0.33, 0.59, 0.14]
    print(z_function)
    transformation = TransformationInverse()

    for x in stack_test:
        print(transformation.implement(x_function, z_function, x))
